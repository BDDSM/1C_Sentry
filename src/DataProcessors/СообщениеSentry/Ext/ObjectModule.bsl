#Область Интерфейс	

// Инициализация базовых параметров
//
// Параметры:
//  РабочийПроект  - Справочник.ПроектыSentry - РабочийПроект в который надо отправить сообщение
//
Процедура Инициализировать(РабочийПроект = Неопределено) Экспорт

	Если ЗначениеЗаполнено(РабочийПроект) Тогда
    
    	ЭтотОбъект.Проект = РабочийПроект;
    
    КонецЕсли; 
    
    Тело = Новый Соответствие;

КонецПроцедуры // Инициализировать()

#Область Уровень_ошибки

Функция УстановитьУровеньОшибки(ЗНАЧ УровеньОшибки) Экспорт
	
	Если нРег(УровеньОшибки) = "ошибка" Тогда
		
		УровеньОшибки = "error";
		
	ИначеЕсли нРег(УровеньОшибки) = "предупреждение" Тогда  

		УровеньОшибки = "warning";
		
	КонецЕсли;
		
	Тело.Вставить("level", УровеньОшибки);
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция ЭтоОшибка() Экспорт
	
	Возврат УстановитьУровеньОшибки("error");
	
КонецФункции

Функция ЭтоПредупреждение() Экспорт

	Возврат  УстановитьУровеньОшибки("warning");
	
КонецФункции

#КонецОбласти
  
// Добавляет основное сообщение(message)
//
// Параметры:
//  ТекстСообщения - Строка - основная информация, что случилось
//
// Возвращаемое значение:
//   ОбработкаОбъект.СообщениеSentry - сама обработка
//
Функция УстановитьТекстСообщения(ЗНАЧ ТекстСообщения) Экспорт

	Тело.Вставить("message", ТекстСообщения);

    Возврат ЭтотОбъект;
    
КонецФункции // УстановитьТекстСообщения()

// Устанавливает дату возникновения события
//
// Параметры:
//  ДатаСобытия  - Дата - Дата, когда произошло событие в универсальном формате
//
// Возвращаемое значение:
//   ОбработкаОбъект.СообщениеSentry   - сама обработка
//
Функция УстановитьДатуСобытия(ЗНАЧ ДатаСобытия) Экспорт

	Тело.Вставить("timestamp", (УниверсальноеВремя(ДатаСобытия) - '0001-01-01-00:00:00') * 1000);
    
    Возврат ЭтотОбъект;

КонецФункции // УстановитьДатуСобытия()


// Указывает номер релиза, в котором произошла ошибка
//
// Параметры:
//  НомерРелиза - Строка - номер версии релиза
// Возвращаемое значение:
//   ОбработкаОбъект - сама обработка
//
Функция УстановитьНомерРелиза(ЗНАЧ НомерРелиза) Экспорт

	Тело.Вставить("release", НомерРелиза);
    
    Возврат ЭтотОбъект;

КонецФункции // УстановитьНомерРелиза()


// Добавляет описание пользователя у которого возникла ошибка
// 
// Параметры:
// 	ПользовательSenty - ОбработкаОбъект.ПользовательSentry - описание пользователя
// Возвращаемое значение:
// 	ОбработкаОбъект.СообщениеSentry - сама обработка
Функция ДобавитьСведенияОПользователе(ПользовательSenty) Экспорт

    Тело.Вставить("user", ПользовательSenty.ПолучитьОписание());
	
	Возврат ЭтотОбъект;
	
КонецФункции


// Добавляет описание окружения ошибки: тестовое, продакшен
// 
// Параметры:
// 	ТипОкружения - Строка - тип: production, test 
// Возвращаемое значение:
// 	ОбработкаОбъект.СообщениеSentry - Описание
Функция УстановитьОкружение(ТипОкружения) Экспорт
	
	ДобавитьТэг("environment", ТипОкружения);
	
	Возврат ЭтотОбъект;
	
КонецФункции

#Область Множественный_выбор

// Добавляет теги для события
// Тэги используются для статистики и по ним можно вести отборы
//
// Параметры:
//  ИмяТега         - Строка - имя добавляемого тега
//  ЗначениеТега    - Строка - значение тега
//
// Возвращаемое значение:
//   ОбработкаОбъект.СообщениеSentry   - сама обработка
Функция ДобавитьТэг(ЗНАЧ ИмяТега, ЗНАЧ ЗначениеТега) Экспорт

    Если Тело["tags"] = Неопределено Тогда
        
        Тело.Вставить("tags", Новый Соответствие);
    
    КонецЕсли; 
    
    Тело["tags"].Вставить(ИмяТега, ЗначениеТега);
    
    Возврат ЭтотОбъект;

КонецФункции // ДобавитьДополнительныйПараметр()

// Добавляет описание контекста выполнения
// Операционная система, платформа, конфигурация
// 
// Параметры:
// 	ИмяКонтекста - Строка - Например: os, platform, app
// 	КонтекстSentry - ОбработкаОбъект.КонтекстSentry - описание контекста
// Возвращаемое значение:
// 	ОбработкаОбъект.СообщениеSentry - сама обработка
Функция ДобавитьОписаниеКонтекста(ИмяКонтекста, КонтекстSentry) Экспорт
	
	Если Тело["contexts"] = Неопределено Тогда
		
		Тело.Вставить("contexts", Новый Соответствие);
		
	КонецЕсли;
	
	Тело["contexts"].Вставить(ИмяКонтекста, КонтекстSentry.ПолучитьОписание());

	Возврат ЭтотОбъект;
		
КонецФункции

// Добавляет описание исключения
// 
// Параметры:
// 	ИсключениеSentry - ОбработкаОбъект.ИсключениеSentry - возникшее исключение
// Возвращаемое значение:
// 	
//	ОбработкаОбъект.СообщениеSentry - сама обработка
Функция ДобавитьОписаниеИсключения(ИсключениеSentry) Экспорт

	Если Тело["exception"] = Неопределено Тогда
        
        Тело.Вставить("exception", Новый Соответствие);
    
	КонецЕсли;
	
	Если Тело["exception"]["values"] = Неопределено Тогда
        
        Тело["exception"].Вставить("values", Новый Массив);
    
	КонецЕсли;
	
	Тело["exception"]["values"].Добавить(ИсключениеSentry.ПолучитьОписание());	
	
	Возврат ЭтотОбъект;
	
КонецФункции

#КонецОбласти

// Добавляет параметры доп. информации
//
// Параметры:
//  Ключ        - Строка - имя параметра
//  Значение    - Произвольный - значение параметра
//
// Возвращаемое значение:
//   ОбработкаОбъект.СообщениеSentry   - сама обработка
//
Функция ДобавитьДополнительныйПараметр(ЗНАЧ Ключ, ЗНАЧ Значение) Экспорт

    Если Тело["extra"] = Неопределено Тогда
        
        Тело.Вставить("extra", Новый Соответствие);
    
    КонецЕсли; 
    
    Тело["extra"].Вставить(Ключ, Значение);
    
    Возврат ЭтотОбъект;

КонецФункции // ДобавитьДополнительныйПараметр()


// Добавляет запись в Breadcrumbs
// 
// Параметры:
// 	ЭлементЦепочкиСобытий - ОбработкаОбъект.ЭлементЦепочкиСобытийSentry - ЭлементТрассировкиСтекаSentry цепочки: работа с интерфейсом, http и т.д.
// Возвращаемое значение:
// 	ОбработкаОбъект.СообщениеSentry - сама обработка
Функция ДобавитьВЦепочкуСобытий(ЭлементЦепочкиСобытий) Экспорт
	
	Если Тело["breadcrumbs"] = Неопределено Тогда
		
		Тело.Вставить("breadcrumbs", Новый Соответствие);
		
	КонецЕсли;
	
	Если Тело["breadcrumbs"]["Values"] = Неопределено Тогда
		
		Тело["breadcrumbs"].Вставить("Values", Новый Массив);
		
	КонецЕсли;
	
	Тело["breadcrumbs"]["Values"].Добавить(ЭлементЦепочкиСобытий.ПолучитьОписание());
	
	Возврат ЭтотОбъект;
	
КонецФункции

// Добавляет запись в modules
// 
// Параметры:
// 	ИмяМодуля		- Строка - имя дополнительного модуля системы
//	ВерсияМодуля	- Строка - версия указанного модуля
// Возвращаемое значение:
// 	ОбработкаОбъект.СообщениеSentry - сама обработка
Функция ДобавитьСведенияОДополнительныхМодулях(ИмяМодуля, ВерсияМодуля = "") Экспорт

	Если Тело["modules"] = Неопределено Тогда
		
		Тело.Вставить("modules", Новый Соответствие());
		
	КонецЕсли;
	
	Тело["modules"].Вставить(ИмяМодуля, ВерсияМодуля);
	
	Возврат ЭтотОбъект;
		
КонецФункции

#КонецОбласти

#Область Терминальные_операции

// Отправляет сообщение в Sentry
//
Функция Отправить() Экспорт

	ДозаполнитьТелоСообщения();

	Возврат ОтправитьСообщениеВSentry();
	
КонецФункции // Отправить()

#КонецОбласти

#Область Вспомогательные_процедуры

// Заполняет недостающие параметры перед отправкой
//
Процедура ДозаполнитьТелоСообщения()

    Тело.Вставить("platform", "1C");
    
	//Если Тело["timestamp"] = Неопределено Тогда
	//
	//    Тело.Вставить("timestamp", ТекущаяУниверсальнаяДата());    	
	//    
	//КонецЕсли; 

КонецПроцедуры // ДозаполнитьТелоСообщения()
 
// Отправляет подготовленное сообщение в сервис Sentyr
//
Функция ОтправитьСообщениеВSentry()

    HTTPСоединение  = КонтурОбщегоНазначенияКлиентСервер.HTTPСоединениеSentry();
    HTTPЗапрос      = Новый HTTPЗапрос;
    
    HTTPЗапрос.АдресРесурса = СтрШаблон("/api/store/?sentry_version=5&sentry_key=%1", Проект.ClientKey);
    
    HTTPЗапрос.Заголовки.Вставить("Content-Type", "JSON");
    HTTPЗапрос.УстановитьТелоИзСтроки(СформироватьJSON());
    
    HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
    
    Если HTTPОтвет.КодСостояния > 300 Тогда
    	
    	ВызватьИсключение HTTPОтвет.ПолучитьТелоКакСтроку();
    	
    Иначе
    	
    	Возврат HTTPОтвет.ПолучитьТелоКакСтроку();
    	
    КонецЕсли;

КонецФункции // ОтправитьСообщениеВSentry()

// Из тела сообщения формирует JSON для отправки
//
// Возвращаемое значение:
//   Строка   - строка json для отправки
//
Функция СформироватьJSON()

	ЗаписьJSON = Новый ЗаписьJSON;
    ЗаписьJSON.УстановитьСтроку();
    
    ЗаписатьJSON(ЗаписьJSON, Тело);
    
    Возврат ЗаписьJSON.Закрыть();

КонецФункции // СформироватьJSON()
 
#КонецОбласти 
 